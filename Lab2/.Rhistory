geom_histogram(mapping = aes(x = p$GSPCReturn), binwidth = .03)
GSPC
AMZ <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$AMZNReturn), binwidth = .03)
AMZ
GOOG <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$GOOGReturn), binwidth = .03)
GOOG
JNJ <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$JNJReturn), binwidth = .03)
JNJ
WMT <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$WMTReturn), binwidth = .03)
WMT
print(summary(p$GSPCReturn), na.rm = TRUE)
print(summary(p$AMZNReturn), na.rm = TRUE)
print(summary(p$GOOGReturn), na.rm = TRUE)
print(summary(p$JNJReturn), na.rm = TRUE)
print(summary(p$WMTReturn), na.rm = TRUE)
print(skewness(p$WMTReturn, na.rm = TRUE))
# Load country code data
p = read_excel("monthly-prices-2014-2019.xlsx", sheet = "All")
GSPC <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$GSPCReturn), binwidth = .03)
GSPC
AMZ <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$AMZNReturn), binwidth = .03)
AMZ
GOOG <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$GOOGReturn), binwidth = .03)
GOOG
JNJ <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$JNJReturn), binwidth = .03)
JNJ
WMT <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$WMTReturn), binwidth = .03)
WMT
print(summary(p$GSPCReturn), na.rm = TRUE)
print(summary(p$AMZNReturn), na.rm = TRUE)
print(summary(p$GOOGReturn), na.rm = TRUE)
print(summary(p$JNJReturn), na.rm = TRUE)
print(summary(p$WMTReturn), na.rm = TRUE)
print(sd(p$WMTReturn, na.rm = TRUE))
# Load country code data
p = read_excel("monthly-prices-2014-2019.xlsx", sheet = "All")
GSPC <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$GSPCReturn), binwidth = .03)
GSPC
AMZ <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$AMZNReturn), binwidth = .03)
AMZ
GOOG <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$GOOGReturn), binwidth = .03)
GOOG
JNJ <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$JNJReturn), binwidth = .03)
JNJ
WMT <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$WMTReturn), binwidth = .03)
WMT
print(summary(p$GSPCReturn), na.rm = TRUE)
print(summary(p$AMZNReturn), na.rm = TRUE)
print(summary(p$GOOGReturn), na.rm = TRUE)
print(summary(p$JNJReturn), na.rm = TRUE)
print(summary(p$WMTReturn), na.rm = TRUE)
print(mean(p$WMTReturn, na.rm = TRUE))
# Load country code data
p = read_excel("monthly-prices-2014-2019.xlsx", sheet = "All")
GSPC <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$GSPCReturn), binwidth = .03)
GSPC
AMZ <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$AMZNReturn), binwidth = .03)
AMZ
GOOG <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$GOOGReturn), binwidth = .03)
GOOG
JNJ <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$JNJReturn), binwidth = .03)
JNJ
WMT <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$WMTReturn), binwidth = .03)
WMT
print(summary(p$GSPCReturn), na.rm = TRUE)
print(summary(p$AMZNReturn), na.rm = TRUE)
print(summary(p$GOOGReturn), na.rm = TRUE)
print(summary(p$JNJReturn), na.rm = TRUE)
print(summary(p$WMTReturn), na.rm = TRUE)
print(sd(p$WMTReturn, na.rm = TRUE))
# Load country code data
p = read_excel("monthly-prices-2014-2019.xlsx", sheet = "All")
GSPC <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$GSPCReturn), binwidth = .03)
GSPC
AMZ <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$AMZNReturn), binwidth = .03)
AMZ
GOOG <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$GOOGReturn), binwidth = .03)
GOOG
JNJ <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$JNJReturn), binwidth = .03)
JNJ
WMT <- ggplot(data = p) +
geom_histogram(mapping = aes(x = p$WMTReturn), binwidth = .03)
WMT
print(summary(p$GSPCReturn), na.rm = TRUE)
print(summary(p$AMZNReturn), na.rm = TRUE)
print(summary(p$GOOGReturn), na.rm = TRUE)
print(summary(p$JNJReturn), na.rm = TRUE)
print(summary(p$WMTReturn), na.rm = TRUE)
print(mean(p$WMTReturn, na.rm = TRUE))
# Load packages used in this session of R
library(tidyverse)
library(knitr)
# As needed, set path to folder where data is located.
opts_knit$set(root.dir = "C:/Users/baileyma/Dropbox/Teaching_drop/OPIM606/ProblemSet1")
c <- c %>%
mutate(pos.pct = positive / (positive + negative))
# Load covid by state week data
c = read_csv("Covid_by_state_week.csv")
head(c)
c <- c %>%
mutate(pos.pct = positives / (positives + negatives))
c <- c %>%
mutate(pos.pct = positives / (positives + negatives))
head(c)
c <- c %>%
mutate(pos.pct = positives / (positives + negatives))
print(head(c))
c <- c %>%
mutate(pos.pct = positives / (positives + negatives))
print(c)
View(c)
View(c)
# change negative counts -> NA
c <- c_original %>%
mutate(ifelse(deaths < 0), NA, deaths) %>%
mutate(ifelse(positives < 0), NA, positives) %>%
mutate(ifelse(negatives < 0), NA, negatives) %>%
# add 'pos.pct'
c <- c %>%
mutate(ifelse(pos.pct = positives / (positives + negatives)))
# Load covid by state week data
c_original = read_csv("Covid_by_state_week.csv")
# change negative counts -> NA
c <- c_original %>%
mutate(ifelse(deaths < 0), NA, deaths) %>%
mutate(ifelse(positives < 0), NA, positives) %>%
mutate(ifelse(negatives < 0), NA, negatives) %>%
# add 'pos.pct'
c <- c %>%
mutate(ifelse(pos.pct = positives / (positives + negatives)))
# change negative counts -> NA
c <- c_original %>%
mutate(ifelse(deaths < 0), NA, deaths) %>%
mutate(ifelse(positives < 0), NA, positives) %>%
mutate(ifelse(negatives < 0), NA, negatives)
# add 'pos.pct'
c <- c %>%
mutate(ifelse(pos.pct = positives / (positives + negatives)))
print(c)
View(c)
View(c)
# change negative counts -> NA
c <- c_original %>%
mutate(ifelse(deaths < 0, NA, deaths)) %>%
mutate(ifelse(positives < 0, NA, positives)) %>%
mutate(ifelse(negatives < 0, NA, negatives))
# add 'pos.pct'
c <- c %>%
mutate(ifelse(pos.pct = positives / (positives + negatives)))
print(c)
View(c)
# change negative counts -> NA
c <- c_original %>%
mutate(deaths = ifelse(deaths < 0, NA, deaths)) %>%
mutate(positives = ifelse(positives < 0, NA, positives)) %>%
mutate(negatives = ifelse(negatives < 0, NA, negatives))
# add 'pos.pct'
c <- c %>%
mutate(ifelse(pos.pct = positives / (positives + negatives)))
print(c)
View(c)
# change negative counts -> NA
c <- c_original %>%
mutate(deaths = ifelse(deaths < 0, NA, deaths)) %>%
mutate(positives = ifelse(positives < 0, NA, positives)) %>%
mutate(negatives = ifelse(negatives < 0, NA, negatives))
# add 'pos.pct'
c <- c %>%
mutate(pos.pct = positives / (positives + negatives))
print(c)
View(c)
print(summary(c$deaths))
print(summary(c$deaths))
print(summary(c$positives))
print(summary(c$negatives))
ifelse(c$deaths == NA, print(c$state, c$friday), next)
ifelse(is.na(c$deaths), print(c$state, c$friday), next)
ifelse(is.na(c$deaths), print(c$state), next)
ifelse(is.na(c$deaths), print(c$state), )
ifelse(is.na(c$deaths), print(c$state), print("test"))
print(unique(list(ifelse(is.na(c$deaths), c$state, next))))
# print(unique(list(ifelse(is.na(c$deaths), c$state, next))))
negDeath <- function() {
res <- list()
for (i in 1:NROW(c$deaths)) {
if (is.na(c$deaths)) {
list <- append(list, c$state[i])
}
}
return(unique(res))
}
print(negDeath())
# print(unique(list(ifelse(is.na(c$deaths), c$state, next))))
negDeath <- function() {
res <- list()
for (i in 1:NROW(c$deaths)) {
if (is.na(c$deaths[i])) {
list <- append(list, c$state[i])
}
}
return(unique(res))
}
print(negDeath())
# print(unique(list(ifelse(is.na(c$deaths), c$state, next))))
negDeath <- function() {
res <- list()
for (i in 1:NROW(c$deaths)) {
if (is.na(c$deaths[i])) {
list <- append(list, c$state[i])
}
}
return(unique(res))
}
negDeath()
# print(unique(list(ifelse(is.na(c$deaths), c$state, next))))
negDeath <- function() {
res <- list()
for (i in 1:NROW(c$deaths)) {
if (is.na(c$deaths[i])) {
print("na found")
list <- append(list, c$state[i])
}
}
return(unique(res))
}
# print(unique(list(ifelse(is.na(c$deaths), c$state, next))))
negDeath <- function() {
res <- list()
for (i in 1:NROW(c$deaths)) {
if (is.na(c$deaths[i])) {
print("na found")
list <- append(list, c$state[i])
}
}
return(unique(res))
}
negDeath()
# print(unique(list(ifelse(is.na(c$deaths), c$state, next))))
negDeath <- function() {
res <- list()
for (i in 1:NROW(c$deaths)) {
if (is.na(c$deaths[i])) {
print("na found")
list <- list(c$state)
}
}
return(unique(res))
}
negDeath()
# print(unique(list(ifelse(is.na(c$deaths), c$state, next))))
negDeath <- function() {
res <- list()
for (i in 1:NROW(c$deaths)) {
print("for")
if (is.na(c$deaths[i])) {
print("na found")
list <- list(c$state)
}
}
return(unique(res))
}
negDeath()
# print(unique(list(ifelse(is.na(c$deaths), c$state, next))))
negDeath <- function() {
for (i in 1:NROW(c$deaths)) {
if (is.na(c$deaths[i])) {
print(c$state)
}
}
}
negDeath()
# print(unique(list(ifelse(is.na(c$deaths), c$state, next))))
negDeath <- function() {
res <- list()
for (i in 1:NROW(c$deaths)) {
if (is.na(c$deaths[i])) {
print("na found")
list <- list(c$state[i])
}
}
return(unique(res))
}
negDeath()
# print(unique(list(ifelse(is.na(c$deaths), c$state, next))))
negDeath <- function() {
res <- list()
for (i in 1:NROW(c$deaths)) {
if (is.na(c$deaths[i])) {
print(c$state[i])
list <- list(c$state[i])
}
}
return(unique(res))
}
negDeath()
# print(unique(list(ifelse(is.na(c$deaths), c$state, next))))
negDeath <- function() {
res <- list()
for (i in 1:NROW(c$deaths)) {
if (is.na(c$deaths[i])) {
print(c$state[i])
list <- list(as.character(c$state[i]))
}
}
return(unique(res))
}
negDeath()
# print(unique(list(ifelse(is.na(c$deaths), c$state, next))))
negDeath <- function() {
for (i in 1:NROW(c$deaths)) {
if (is.na(c$deaths[i])) {
print(c$state[i])
print(c$friday)
}
}
}
negDeath()
# print(unique(list(ifelse(is.na(c$deaths), c$state, next))))
negDeath <- function() {
for (i in 1:NROW(c$deaths)) {
if (is.na(c$deaths[i])) {
print(c$state[i])
print(c$friday[i])
}
}
}
negDeath()
# add 'pos.pct'
c_original <- c_original %>%
mutate(pos.pct = positives / (positives + negatives))
print(c_original)
# deaths
print(summary(c_original$deaths))
# positives
print(summary(c_original$positives))
# negatives
print(summary(c_original$negatives))
# These data are more informative than the original data because the invalid/ negative values have been set to NA and therefore, the negative values will not affect minimum, mean, and quantiles
# deaths
print(summary(c_original$deaths))
# positives
print(summary(c_original$positives))
# negatives
print(summary(c_original$negatives))
# These data is not informative because the invalid/ negative values will affect the accuracy of the minimum, mean, and quantiles
negDeath <- function() {
for (i in 1:NROW(c_original$deaths)) {
if (c_original$deaths[i] < 0) {
print(c_original$state[i])
print(c_original$friday[i])
}
}
}
negDeath()
# for the negative value of death count, we should treat it as an outlier, since the count of people cannot be a negative number
# clean dataset: change negative counts -> NA
c <- c_original %>%
mutate(deaths = ifelse(deaths < 0, NA, deaths)) %>%
mutate(positives = ifelse(positives < 0, NA, positives)) %>%
mutate(negatives = ifelse(negatives < 0, NA, negatives))
# deaths
print(summary(c$deaths))
# positives
print(summary(c$positives))
# negatives
print(summary(c$negatives))
# These data are more informative than the original data because the invalid/ negative values have been set to NA and therefore, the negative values will not affect minimum, mean, and quantiles
# clean dataset: change negative counts -> NA
c <- c_original %>%
mutate(deaths = ifelse(deaths < 0, NA, deaths)) %>%
mutate(positives = ifelse(positives < 0, NA, positives)) %>%
mutate(negatives = ifelse(negatives < 0, NA, negatives))
# deaths
print(summary(c$deaths))
# positives
print(summary(c$positives))
# negatives
print(summary(c$negatives))
# clean dataset: change negative counts -> NA
c <- c_original %>%
mutate(deaths = ifelse(deaths < 0, NA, deaths)) %>%
mutate(positives = ifelse(positives < 0, NA, positives)) %>%
mutate(negatives = ifelse(negatives < 0, NA, negatives))
# deaths
print(summary(c$deaths))
# positives
print(summary(c$positives))
# negatives
print(summary(c$negatives))
# sknewness
c %>%
summarise(
skewDeaths = skewness(deaths, na.rm = TRUE),
sknewPositives = sknewness(positives, na.rm = TRUE),
sknewNegatives = sknewness(negatives, na.rm = TRUE)
)
# Load packages used in this session of R
library(tidyverse)
library(knitr)
library(ggplot2)
library(moments)
# As needed, set path to folder where data is located.
opts_knit$set(root.dir = "C:/Users/baileyma/Dropbox/Teaching_drop/OPIM606/ProblemSet1")
# clean dataset: change negative counts -> NA
c <- c_original %>%
mutate(deaths = ifelse(deaths < 0, NA, deaths)) %>%
mutate(positives = ifelse(positives < 0, NA, positives)) %>%
mutate(negatives = ifelse(negatives < 0, NA, negatives))
# deaths
print(summary(c$deaths))
# positives
print(summary(c$positives))
# negatives
print(summary(c$negatives))
# sknewness
c %>%
summarise(
skewDeaths = skewness(deaths, na.rm = TRUE),
sknewPositives = sknewness(positives, na.rm = TRUE),
sknewNegatives = sknewness(negatives, na.rm = TRUE)
)
# clean dataset: change negative counts -> NA
c <- c_original %>%
mutate(deaths = ifelse(deaths < 0, NA, deaths)) %>%
mutate(positives = ifelse(positives < 0, NA, positives)) %>%
mutate(negatives = ifelse(negatives < 0, NA, negatives))
# deaths
print(summary(c$deaths))
# positives
print(summary(c$positives))
# negatives
print(summary(c$negatives))
# sknewness
c %>%
summarise(
skewDeaths = skewness(deaths, na.rm = TRUE),
sknewPositives = skewness(positives, na.rm = TRUE),
sknewNegatives = skewness(negatives, na.rm = TRUE)
)
# clean dataset: change negative counts -> NA
c <- c_original %>%
mutate(deaths = ifelse(deaths < 0, NA, deaths)) %>%
mutate(positives = ifelse(positives < 0, NA, positives)) %>%
mutate(negatives = ifelse(negatives < 0, NA, negatives))
# deaths
print(summary(c$deaths))
# positives
print(summary(c$positives))
# negatives
print(summary(c$negatives))
# sknewness, the data is highly skewed to the right
c %>%
summarise(
skewDeaths = skewness(deaths, na.rm = TRUE),
sknewPositives = skewness(positives, na.rm = TRUE),
sknewNegatives = skewness(negatives, na.rm = TRUE)
)
# kurtosis
c %>%
summarise(
kurtosisDeaths = kurtosis(deaths, na.rm = TRUE),
kurtosisPositives = kurtosis(positives, na.rm = TRUE),
kurtosisNegatives = kurtosis(negatives, na.rm = TRUE)
)
# clean dataset: change negative counts -> NA
c <- c_original %>%
mutate(deaths = ifelse(deaths < 0, NA, deaths)) %>%
mutate(positives = ifelse(positives < 0, NA, positives)) %>%
mutate(negatives = ifelse(negatives < 0, NA, negatives))
# deaths
print(summary(c$deaths))
# positives
print(summary(c$positives))
# negatives
print(summary(c$negatives))
# sknewness, the data is highly skewed to the right
c %>%
summarise(
skewDeaths = skewness(deaths, na.rm = TRUE),
sknewPositives = skewness(positives, na.rm = TRUE),
sknewNegatives = skewness(negatives, na.rm = TRUE)
)
# kurtosis, the data is not normally distributed
c %>%
summarise(
kurtosisDeaths = kurtosis(deaths, na.rm = TRUE),
kurtosisPositives = kurtosis(positives, na.rm = TRUE),
kurtosisNegatives = kurtosis(negatives, na.rm = TRUE)
)
