max = max(pos.pct))
# The data is NOT fully informative.
# reason 1: the invalid/ negative values will affect the accuracy of the minimum, mean, quantiles, and pos.pct
# reason 2: the min positive percent (pos.pct) is negative, and the max is over 100, which do not make sense
negDeath <- function() {
for (i in 1:NROW(c_original$deaths)) {
if (c_original$deaths[i] < 0) {
print(c_original$state[i])
print(c_original$friday[i])
}
}
}
negDeath()
# for the negative value of death count, we should treat it as an outlier since the count of people cannot be a negative number. Therefore, I would set the outlier to NA.
# clean dataset: change negative counts -> NA
c <- c_original %>%
mutate(deaths = ifelse(deaths < 0, NA, deaths)) %>%
mutate(positives = ifelse(positives < 0, NA, positives)) %>%
mutate(negatives = ifelse(negatives < 0, NA, negatives)) %>%
mutate(pos.pct = ifelse(pos.pct < 0, NA, positives / (positives + negatives) * 100))
# deaths
summarise(c,
mean = mean(deaths, na.rm = TRUE),
min = min(deaths, na.rm = TRUE),
max = max(deaths, na.rm = TRUE))
# positives
summarise(c,
mean = mean(positives, na.rm = TRUE),
min = min(positives, na.rm = TRUE),
max = max(positives, na.rm = TRUE))
# pos.pct
summarise(c,
mean = mean(pos.pct, na.rm = TRUE),
min = min(pos.pct, na.rm = TRUE),
max = max(pos.pct, na.rm = TRUE))
# sknewness, the data is highly skewed to the right
c %>%
summarise(
skewDeaths = skewness(deaths, na.rm = TRUE),
sknewPositives = skewness(positives, na.rm = TRUE),
sknewNegatives = skewness(negatives, na.rm = TRUE)
)
# kurtosis, the data is not normally distributed
c %>%
summarise(
kurtosisDeaths = kurtosis(deaths, na.rm = TRUE),
kurtosisPositives = kurtosis(positives, na.rm = TRUE),
kurtosisNegatives = kurtosis(negatives, na.rm = TRUE)
)
dfMaxLevelDeath <- data.frame(Deaths = integer(), State = character(), Week = character())
cByState <- dplyr::arrange(c, state)
i = 1
while (i < NROW(cByState)) {
curState <- cByState$state[i]
curDf <- cByState %>%
filter(cByState$state == curState) %>%
dplyr::select(deaths, state, friday)
curCount <- NROW(curDf)
curRes <- arrange(curDf, desc(deaths))[1, ]
# store current answer to result data frame
dfMaxLevelDeath <- rbind(dfMaxLevelDeath, curRes)
i <- i + curCount
}
names(dfMaxLevelDeath) <- c("Deaths", "State", "Week")
head(dfMaxLevelDeath, 5)
getCaseCount <- function(stateName) {
cCur <- c %>%
filter(state == stateName) %>%
arrange(state)
return(sum(cCur$positives))
}
# test: CA
getCaseCount("CA")
# test： VA
getCaseCount("VA")
getDataObj <- function() {
resObj = list()
i = 1
while (i < NROW(c)) {
curDate <- c$friday[i]
curInfo <- c %>%
filter(friday == curDate) %>%
select(state, positives)
curCount = NROW(curInfo)
curInfo2 <- c %>%
filter(friday == curDate)
curTotal <- sum(curInfo2$positives)
# curRes = list(as.character(curDate), curInfo$state, curInfo$positives, as.integer(curTotal))
curRes = list(Date = as.character(curDate), Info = curInfo, Total = as.integer(curTotal))
resObj <- append(resObj, curRes)
i = i + curCount
}
return(resObj)
}
resObj = getDataObj()
print(head(resObj, 5))
getDataObj <- function() {
resObj = list()
i = 1
while (i < NROW(c)) {
curDate <- c$friday[i]
curInfo <- c %>%
filter(friday == curDate) %>%
select(state, positives)
curCount = NROW(curInfo)
curInfo2 <- c %>%
filter(friday == curDate)
curTotal <- sum(curInfo2$positives)
# curRes = list(as.character(curDate), curInfo$state, curInfo$positives, as.integer(curTotal))
curRes = list(Date = as.character(curDate), Info = curInfo, Total = as.integer(curTotal))
resObj <- append(resObj, curRes)
i = i + curCount
}
return(resObj)
}
resObj = getDataObj()
print(head(resObj))
# Load packages used in this session of R
library(tidyverse)
library(knitr)
library(moments)
library(formattable)
library(hash)
# As needed, set path to folder where data is located.
opts_knit$set(root.dir = "C:/Users/Xue Feng/Desktop/OPIM606/ProblemSet1")
# Load covid by state week data
c_original = read_csv("Covid_by_state_week.csv")
# add 'pos.pct'
c_original <- c_original %>%
mutate(pos.pct = positives / (positives + negatives) * 100)
# *100
print(c_original)
# deaths
summarise(c_original,
mean = mean(deaths),
min = min(deaths),
max = max(deaths))
# positives
summarise(c_original,
mean = mean(positives),
min = min(positives),
max = max(positives))
# pos.pct
summarise(c_original,
mean = mean(pos.pct),
min = min(pos.pct),
max = max(pos.pct))
# The data is NOT fully informative.
# reason 1: the invalid/ negative values will affect the accuracy of the minimum, mean, quantiles, and pos.pct
# reason 2: the min positive percent (pos.pct) is negative, and the max is over 100, which do not make sense
negDeath <- function() {
for (i in 1:NROW(c_original$deaths)) {
if (c_original$deaths[i] < 0) {
print(c_original$state[i])
print(c_original$friday[i])
}
}
}
negDeath()
# for the negative value of death count, we should treat it as an outlier since the count of people cannot be a negative number. Therefore, I would set the outlier to NA.
# clean dataset: change negative counts -> NA
c <- c_original %>%
mutate(deaths = ifelse(deaths < 0, NA, deaths)) %>%
mutate(positives = ifelse(positives < 0, NA, positives)) %>%
mutate(negatives = ifelse(negatives < 0, NA, negatives)) %>%
mutate(pos.pct = ifelse(pos.pct < 0, NA, positives / (positives + negatives) * 100))
# deaths
summarise(c,
mean = mean(deaths, na.rm = TRUE),
min = min(deaths, na.rm = TRUE),
max = max(deaths, na.rm = TRUE))
# positives
summarise(c,
mean = mean(positives, na.rm = TRUE),
min = min(positives, na.rm = TRUE),
max = max(positives, na.rm = TRUE))
# pos.pct
summarise(c,
mean = mean(pos.pct, na.rm = TRUE),
min = min(pos.pct, na.rm = TRUE),
max = max(pos.pct, na.rm = TRUE))
# sknewness, the data is highly skewed to the right
c %>%
summarise(
skewDeaths = skewness(deaths, na.rm = TRUE),
sknewPositives = skewness(positives, na.rm = TRUE),
sknewNegatives = skewness(negatives, na.rm = TRUE)
)
# kurtosis, the data is not normally distributed
c %>%
summarise(
kurtosisDeaths = kurtosis(deaths, na.rm = TRUE),
kurtosisPositives = kurtosis(positives, na.rm = TRUE),
kurtosisNegatives = kurtosis(negatives, na.rm = TRUE)
)
dfMaxLevelDeath <- data.frame(Deaths = integer(), State = character(), Week = character())
cByState <- dplyr::arrange(c, state)
i = 1
while (i < NROW(cByState)) {
curState <- cByState$state[i]
curDf <- cByState %>%
filter(cByState$state == curState) %>%
dplyr::select(deaths, state, friday)
curCount <- NROW(curDf)
curRes <- arrange(curDf, desc(deaths))[1, ]
# store current answer to result data frame
dfMaxLevelDeath <- rbind(dfMaxLevelDeath, curRes)
i <- i + curCount
}
names(dfMaxLevelDeath) <- c("Deaths", "State", "Week")
head(dfMaxLevelDeath, 5)
getCaseCount <- function(stateName) {
cCur <- c %>%
filter(state == stateName) %>%
arrange(state)
return(sum(cCur$positives))
}
# test: CA
getCaseCount("CA")
# test： VA
getCaseCount("VA")
getDataObj <- function() {
resObj = list()
i = 1
while (i < NROW(c)) {
curDate <- c$friday[i]
curInfo <- c %>%
filter(friday == curDate) %>%
select(state, positives)
curCount = NROW(curInfo)
curInfo2 <- c %>%
filter(friday == curDate)
curTotal <- sum(curInfo2$positives)
# curRes = list(as.character(curDate), curInfo$state, curInfo$positives, as.integer(curTotal))
curRes = list(Date = as.character(curDate), Info = curInfo, Total = as.integer(curTotal))
resObj <- append(resObj, curRes)
i = i + curCount
}
return(resObj)
}
resObj = getDataObj()
print(resObj)
# Load packages used in this session of R
library(tidyverse)
library(knitr)
library(moments)
library(formattable)
library(hash)
# As needed, set path to folder where data is located.
opts_knit$set(root.dir = "C:/Users/Xue Feng/Desktop/OPIM606/ProblemSet1")
# Load covid by state week data
c_original = read_csv("Covid_by_state_week.csv")
# add 'pos.pct'
c_original <- c_original %>%
mutate(pos.pct = positives / (positives + negatives) * 100)
print(c_original)
# deaths
summarise(c_original,
mean = mean(deaths),
min = min(deaths),
max = max(deaths))
# positives
summarise(c_original,
mean = mean(positives),
min = min(positives),
max = max(positives))
# pos.pct
summarise(c_original,
mean = mean(pos.pct),
min = min(pos.pct),
max = max(pos.pct))
# The data is NOT fully informative.
# reason 1: the invalid/ negative values will affect the accuracy of the minimum, mean, quantiles, and pos.pct
# reason 2: the min positive percent (pos.pct) is negative, and the max is over 100, which do not make sense
negDeath <- function() {
for (i in 1:NROW(c_original$deaths)) {
if (c_original$deaths[i] < 0) {
print(c_original$state[i])
print(c_original$friday[i])
}
}
}
negDeath()
# for the negative value of death count, we should treat it as an outlier since the count of people cannot be a negative number. Therefore, I would set the outlier to NA.
# clean dataset: change negative counts -> NA
c <- c_original %>%
mutate(deaths = ifelse(deaths < 0, NA, deaths)) %>%
mutate(positives = ifelse(positives < 0, NA, positives)) %>%
mutate(negatives = ifelse(negatives < 0, NA, negatives)) %>%
mutate(pos.pct = ifelse(pos.pct < 0, NA, positives / (positives + negatives) * 100))
# deaths
summarise(c,
mean = mean(deaths, na.rm = TRUE),
min = min(deaths, na.rm = TRUE),
max = max(deaths, na.rm = TRUE))
# positives
summarise(c,
mean = mean(positives, na.rm = TRUE),
min = min(positives, na.rm = TRUE),
max = max(positives, na.rm = TRUE))
# pos.pct
summarise(c,
mean = mean(pos.pct, na.rm = TRUE),
min = min(pos.pct, na.rm = TRUE),
max = max(pos.pct, na.rm = TRUE))
# sknewness, the data is highly skewed to the right
c %>%
summarise(
skewDeaths = skewness(deaths, na.rm = TRUE),
sknewPositives = skewness(positives, na.rm = TRUE),
sknewNegatives = skewness(negatives, na.rm = TRUE)
)
# kurtosis, the data is not normally distributed
c %>%
summarise(
kurtosisDeaths = kurtosis(deaths, na.rm = TRUE),
kurtosisPositives = kurtosis(positives, na.rm = TRUE),
kurtosisNegatives = kurtosis(negatives, na.rm = TRUE)
)
dfMaxLevelDeath <- data.frame(Deaths = integer(), State = character(), Week = character())
cByState <- dplyr::arrange(c, state)
i = 1
while (i < NROW(cByState)) {
curState <- cByState$state[i]
curDf <- cByState %>%
filter(cByState$state == curState) %>%
dplyr::select(deaths, state, friday)
curCount <- NROW(curDf)
curRes <- arrange(curDf, desc(deaths))[1, ]
# store current answer to result data frame
dfMaxLevelDeath <- rbind(dfMaxLevelDeath, curRes)
i <- i + curCount
}
names(dfMaxLevelDeath) <- c("Deaths", "State", "Week")
head(dfMaxLevelDeath, 5)
getCaseCount <- function(stateName) {
cCur <- c %>%
filter(state == stateName) %>%
arrange(state)
return(sum(cCur$positives))
}
# test: CA
getCaseCount("CA")
# test： VA
getCaseCount("VA")
getDataObj <- function() {
resObj = list()
i = 1
while (i < NROW(c)) {
curDate <- c$friday[i]
curInfo <- c %>%
filter(friday == curDate) %>%
select(state, positives)
curCount = NROW(curInfo)
curInfo2 <- c %>%
filter(friday == curDate)
curTotal <- sum(curInfo2$positives)
# curRes = list(as.character(curDate), curInfo$state, curInfo$positives, as.integer(curTotal))
curRes = list(Date = as.character(curDate), Info = curInfo, Total = as.integer(curTotal))
resObj <- append(resObj, curRes)
i = i + curCount
}
return(resObj)
}
resObj = getDataObj()
print(resObj)
getDataObj <- function() {
resObj = list()
i = 1
while (i < NROW(c)) {
curDate <- c$friday[i]
curInfo <- c %>%
filter(friday == curDate) %>%
select(state, positives)
curCount = NROW(curInfo)
curInfo2 <- c %>%
filter(friday == curDate)
curTotal <- sum(curInfo2$positives)
# curRes = list(as.character(curDate), curInfo$state, curInfo$positives, as.integer(curTotal))
curRes = list(Date = as.character(curDate), Info = curInfo, Total = as.integer(curTotal))
resObj <- append(resObj, curRes)
i = i + curCount
}
return(resObj)
}
resObj = getDataObj()
# print the first 5 of the list
print(head(resObj), 5)
# Load packages used in this session of R
library(tidyverse)
library(knitr)
library(moments)
library(formattable)
library(hash)
# As needed, set path to folder where data is located.
opts_knit$set(root.dir = "C:/Users/Xue Feng/Desktop/OPIM606/ProblemSet1")
# Load covid by state week data
c_original = read_csv("Covid_by_state_week.csv")
# add 'pos.pct'
c_original <- c_original %>%
mutate(pos.pct = positives / (positives + negatives) * 100)
print(c_original)
# deaths
summarise(c_original,
mean = mean(deaths),
min = min(deaths),
max = max(deaths))
# positives
summarise(c_original,
mean = mean(positives),
min = min(positives),
max = max(positives))
# pos.pct
summarise(c_original,
mean = mean(pos.pct),
min = min(pos.pct),
max = max(pos.pct))
# The data is NOT fully informative.
# reason 1: the invalid/ negative values will affect the accuracy of the minimum, mean, quantiles, and pos.pct
# reason 2: the min positive percent (pos.pct) is negative, and the max is over 100, which do not make sense
negDeath <- function() {
for (i in 1:NROW(c_original$deaths)) {
if (c_original$deaths[i] < 0) {
print(c_original$state[i])
print(c_original$friday[i])
}
}
}
negDeath()
# for the negative value of death count, we should treat it as an outlier since the count of people cannot be a negative number. Therefore, I would set the outlier to NA.
# clean dataset: change negative counts -> NA
c <- c_original %>%
mutate(deaths = ifelse(deaths < 0, NA, deaths)) %>%
mutate(positives = ifelse(positives < 0, NA, positives)) %>%
mutate(negatives = ifelse(negatives < 0, NA, negatives)) %>%
mutate(pos.pct = ifelse(pos.pct < 0, NA, positives / (positives + negatives) * 100))
# deaths
summarise(c,
mean = mean(deaths, na.rm = TRUE),
min = min(deaths, na.rm = TRUE),
max = max(deaths, na.rm = TRUE))
# positives
summarise(c,
mean = mean(positives, na.rm = TRUE),
min = min(positives, na.rm = TRUE),
max = max(positives, na.rm = TRUE))
# pos.pct
summarise(c,
mean = mean(pos.pct, na.rm = TRUE),
min = min(pos.pct, na.rm = TRUE),
max = max(pos.pct, na.rm = TRUE))
# sknewness, the data is highly skewed to the right
c %>%
summarise(
skewDeaths = skewness(deaths, na.rm = TRUE),
sknewPositives = skewness(positives, na.rm = TRUE),
sknewNegatives = skewness(negatives, na.rm = TRUE)
)
# kurtosis, the data is not normally distributed
c %>%
summarise(
kurtosisDeaths = kurtosis(deaths, na.rm = TRUE),
kurtosisPositives = kurtosis(positives, na.rm = TRUE),
kurtosisNegatives = kurtosis(negatives, na.rm = TRUE)
)
dfMaxLevelDeath <- data.frame(Deaths = integer(), State = character(), Week = character())
cByState <- dplyr::arrange(c, state)
i = 1
while (i < NROW(cByState)) {
curState <- cByState$state[i]
curDf <- cByState %>%
filter(cByState$state == curState) %>%
dplyr::select(deaths, state, friday)
curCount <- NROW(curDf)
curRes <- arrange(curDf, desc(deaths))[1, ]
# store current answer to result data frame
dfMaxLevelDeath <- rbind(dfMaxLevelDeath, curRes)
i <- i + curCount
}
names(dfMaxLevelDeath) <- c("Deaths", "State", "Week")
head(dfMaxLevelDeath, 5)
getCaseCount <- function(stateName) {
cCur <- c %>%
filter(state == stateName) %>%
arrange(state)
return(sum(cCur$positives))
}
# test: CA
getCaseCount("CA")
# test： VA
getCaseCount("VA")
getDataObj <- function() {
resObj = list()
i = 1
while (i < NROW(c)) {
curDate <- c$friday[i]
curInfo <- c %>%
filter(friday == curDate) %>%
select(state, positives)
curCount = NROW(curInfo)
curInfo2 <- c %>%
filter(friday == curDate)
curTotal <- sum(curInfo2$positives)
# curRes = list(as.character(curDate), curInfo$state, curInfo$positives, as.integer(curTotal))
curRes = list(Date = as.character(curDate), Info = curInfo, Total = as.integer(curTotal))
resObj <- append(resObj, curRes)
i = i + curCount
}
return(resObj)
}
resObj = getDataObj()
print(head(resObj))
